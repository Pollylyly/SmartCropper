plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    namespace="me.pqpo.smartcropperlib"
    ndkVersion '25.1.8937393'
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 10
        versionName "2.1.4"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
                abiFilters 'armeabi-v7a', "arm64-v8a", 'x86', 'x86_64'
                arguments "-DANDROID_TOOLCHAIN=clang", "-DANDROID_STL=c++_static"
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection Aligned16KB
    api 'org.tensorflow:tensorflow-lite:2.17.0'
}

publishing {
    publications {
        // 遍历所有的构建变体 (比如 release, debug)
        android.libraryVariants.all { variant ->
            // 为每个变体创建一个 MavenPublication
            create(variant.name, MavenPublication) {
                artifactId = "SmartCropper"
                //指定发布的制品是该变体打包后的 .aar 文件
                artifact(variant.packageLibraryProvider.get())

                //指定 pom 文件的内容应该包含依赖信息
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // 遍历这个变体在编译时所需的所有'api'和'implementation'依赖
                    project.configurations.getByName(variant.name + "CompileClasspath").allDependencies.each {
                        // 只添加那些有 group, name, version 的外部依赖
                        if (it.group != null && it.name != null && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}