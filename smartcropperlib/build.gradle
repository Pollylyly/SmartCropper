plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    namespace="me.pqpo.smartcropperlib"
    ndkVersion '25.1.8937393'
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 10
        versionName project.properties['versionName']

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
                abiFilters 'armeabi-v7a', "arm64-v8a", 'x86', 'x86_64'
                arguments "-DANDROID_TOOLCHAIN=clang", "-DANDROID_STL=c++_static"
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    //noinspection Aligned16KB
    api 'org.tensorflow:tensorflow-lite:2.17.0'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // 指定 GAV，由 gradle.properties 控制
                groupId = "com.github.Pollylyly"
                artifactId = "SmartCropper" // 必须与 GitHub 仓库名完全一致
                version = project.properties['versionName']

                artifact tasks.named("bundleReleaseAar")

                //将依赖信息写入 pom.xml
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // 遍历 release 版本编译时所需的所有依赖
                    project.configurations.releaseCompileClasspath.allDependencies.each { dep ->
                        if (dep.group != null && dep.name != null && dep.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                        }
                    }
                }
            }
        }
    }
}